# docker-compose.yml (Final Correct Version)

networks:
  llm_toolkit_net:
    driver: bridge

services:
  webapp:
    # --- THIS IS THE FIX ---
    # Use the override variable if it's set, otherwise fall back to building locally.
    image: ${WEBAPP_IMAGE_OVERRIDE:-}
    build:
      context: .
    ports:
      - "5001:5000"
    volumes:
      - ./app:/app/app
      - ./wsgi.py:/app/wsgi.py
      - ./run_cli.py:/app/run_cli.py
      # Mount the host's cache directory (provided by the HF_CACHE_PATH env var)
      # into the container's cache location.
      - ${HF_CACHE_PATH}:/root/.cache/huggingface

    # --- THIS IS THE FIX ---
    # Instead of 'env_file', we define the environment variables directly.
    # Docker Compose will first look for these variables in the host environment
    # (which we set in the CI job). If it can't find them, it will then look
    # in a .env file in the project root. This is the perfect behavior.
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db/${MYSQL_DATABASE}
      # You can add other variables your webapp needs here, like OPENAI_API_KEY
      # For local runs, it will pick them up from your .env file.
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TARGET_API_ENDPOINT=${TARGET_API_ENDPOINT}
      - TARGET_LLM_API_KEY=${TARGET_LLM_API_KEY}

    depends_on:
      db:
        condition: service_healthy # Wait for the database to be healthy before starting the webapp
    restart: always
    networks:
      - llm_toolkit_net

  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3307:3306"

    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    # --- THIS IS THE FIX (Part 1) ---
    # Add a health check to the database service.
    healthcheck:
      # This command repeatedly tries to connect to the database.
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}" ]
      interval: 10s # Check every 10 seconds
      timeout: 5s # Wait 5 seconds for the check to respond
      retries: 10 # Try up to 10 times (100 seconds total)
      start_period: 30s # Give the container 30 seconds to start up before the first check

    volumes:
      - mysql_data:/var/lib/mysql
    restart: always
    networks:
      - llm_toolkit_net

volumes:
  mysql_data:
