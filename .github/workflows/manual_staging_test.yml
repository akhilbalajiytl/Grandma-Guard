# .github/workflows/manual_staging_test.yml (Final, Simplified, and Corrected)

name: Manual Staging Test

on:
  workflow_dispatch:

jobs:
  staging-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    env:
      MYSQL_USER: staging_user
      MYSQL_PASSWORD: staging_password
      MYSQL_DATABASE: staging_db
      MYSQL_ROOT_PASSWORD: staging_root_password
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      HF_CACHE_PATH: /home/runner/.cache/huggingface
      # Define a tag for the image we're about to build locally
      WEBAPP_IMAGE_OVERRIDE: llm-safety-toolkit:ci-${{ github.run_id }}
      # Define the cache image path
      CACHE_IMAGE_PATH: ghcr.io/${{ github.repository_owner }}/llm-safety-toolkit

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Create Reports Directory
        run: mkdir -p ./reports_output
        
      - name: Cache Hugging Face models
        uses: actions/cache@v4
        with:
          path: ${{ env.HF_CACHE_PATH }}
          key: ${{ runner.os }}-hf-${{ hashFiles('**/requirements.txt') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (for caching)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # This step builds the image, pushes the cache to GHCR, AND
      # loads the final image into the local Docker daemon so docker compose can use it.
      - name: Build and Cache Docker image
        uses: docker/build-push-action@v5
        with:
            context: .
            push: false
            load: true
            tags: ${{ env.DOCKER_IMAGE_TAG }}
            # Use the lowercase-compliant cache path
            cache-from: type=registry,ref=${{ env.CACHE_IMAGE_PATH }}:buildcache
            cache-to: type=registry,ref=${{ env.CACHE_IMAGE_PATH }}:buildcache,mode=max

      - name: Start Database Service
        # We start the 'db' from the main compose file.
        run: docker compose -f docker-compose.yml up -d db
        env:
          WEBAPP_IMAGE_OVERRIDE: ${{ env.WEBAPP_IMAGE_OVERRIDE }}
      
      # Now that we are using the original docker-compose.yml, the 'run' command
      # will behave exactly like it did in your original successful workflow.
      - name: Run Scan
        run: |
          bash -c '
            docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm \
              -e CI=true \
              -e DATABASE_URL="mysql+pymysql://staging_user:staging_password@db/staging_db" \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              webapp python run_cli.py \
                --model-name "Staging Test: GPT-3.5-Turbo" \
                --api-endpoint "https://api.openai.com/v1/chat/completions" \
                --api-key "${{ secrets.OPENAI_API_KEY }}" \
                --openai-model "gpt-3.5-turbo" \
            | tee staging_scan_output.log
          '
  
      # Upload the generated report as a build artifact 
      - name: Upload Scan Report Artifact
        uses: actions/upload-artifact@v4
        with:
          # The name of the artifact bundle that will appear in the GitHub UI
          name: llm-safety-scan-report
          # The path on the host runner where the report was saved
          path: ./reports_output/
          # How long to keep the artifact (e.g., 7 days)
          retention-days: 7

      # Step 6: Publish the Job Summary from the log file
      - name: Publish Test Summary
        if: success()
        run: |
          score_line=$(grep 'Score:' staging_scan_output.log | tail -n 1)
          if [ -z "$score_line" ]; then
              score_line="Score: Not found"
          fi
          echo "### 🛡️ LLM Safety Toolkit: Manual Staging Test" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Result:** ✅ Real Scan Completed" >> $GITHUB_STEP_SUMMARY
          echo "**Final Score:** \`${score_line}\`" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to view full scan log</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat staging_scan_output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      # Step 7: Display logs only if a step failed
      - name: Display container logs on failure
        # We need WEBAPP_IMAGE here for docker compose logs to resolve the service correctly.
        env:
          WEBAPP_IMAGE: ${{ env.DOCKER_IMAGE }}:latest
        if: failure()
        run: docker compose -f docker-compose.ci.yml logs