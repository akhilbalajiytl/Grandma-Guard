# .github/workflows/manual_staging_test.yml

name: Manual Staging Test

# This is the key part for a manual trigger.
# It adds a "Run workflow" button to the Actions tab in GitHub.
on:
  workflow_dispatch:

jobs:
  # The job that will run our real-world test.
  staging-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code.
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build and run the services using Docker Compose.
      # Notice we are passing the secret API key into the build environment.
      - name: Build and run Docker Compose
        env:
          MYSQL_USER: staging_user
          MYSQL_PASSWORD: staging_password
          MYSQL_DATABASE: staging_db
          MYSQL_ROOT_PASSWORD: staging_root_password
          # This securely injects the secret into the Docker Compose environment.
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: docker compose up --build -d

      # Step 4: Wait for the services to be ready.
      - name: Wait for services
        run: |
          echo "Waiting for database to be ready..."
          i=0
          while ! docker compose exec -T webapp sh -c 'nc -z db 3306' >/dev/null 2>&1; do
            i=$((i+1))
            if [ $i -ge 12 ]; then
              echo "Database did not become available in time."
              docker compose logs db
              exit 1
            fi
            echo -n "."
            sleep 5
          done
          echo "Database is ready!"

      # Step 5: Run the REAL scan.
      # This step also gets the secret key and uses real endpoints/models.
      - name: Run REAL scan against GPT-3.5-Turbo
        run: >
          docker compose exec -T
          -e CI=true
          -e DATABASE_URL="sqlite:///ci_scan_results.db"
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          webapp python run_cli.py
          --model-name "Staging Test: GPT-3.5-Turbo"
          --api-endpoint "https://api.openai.com/v1/chat/completions"
          --api-key "${{ secrets.OPENAI_API_KEY }}"
          --openai-model "gpt-3.5-turbo"
      
      # Step 6: Display logs if the scan failed.
      - name: Display container logs on failure
        if: failure()
        run: docker compose logs