# .github/workflows/manual_staging_test.yml

name: Manual Staging Test

on:
  workflow_dispatch:

jobs:
  staging-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # --- HUGGING FACE CACHE (PART 1) ---
      # This step remains the same. It will restore the cache to the host runner.
      - name: Cache Hugging Face models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-huggingface-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-huggingface-

      # --- DOCKER BUILDX CACHE (PART 1) ---
      # This step also remains the same. It restores the builder cache.
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-staging-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-staging-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: "network=host" # Helps with builder network performance

      # Step 3: Build and run Docker Compose
      - name: Build and run Docker Compose
        env:
          MYSQL_USER: staging_user
          MYSQL_PASSWORD: staging_password
          MYSQL_DATABASE: staging_db
          MYSQL_ROOT_PASSWORD: staging_root_password
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # --- DOCKER BUILDX CACHE (PART 2) ---
          # We export the cache location to an environment variable
          # that 'docker compose build' can use.
          export BUILDKIT_CACHE_DIR=/tmp/.buildx-cache

          # --- HUGGING FACE CACHE (PART 2) ---
          # We create the cache directory on the host runner IF it doesn't exist.
          # This prevents a 'docker compose' error.
          mkdir -p ~/.cache/huggingface

          # --- THE FINAL BUILD & RUN COMMAND ---
          # We now pass the host's cache directory into the container via a volume
          # in the 'docker compose up' command itself.
          docker compose \
            -f docker-compose.yml \
            build

          docker compose \
            -f docker-compose.yml \
            run \
            -d \
            --service-ports \
            --name webapp-ci \
            -v ~/.cache/huggingface:/root/.cache/huggingface \
            webapp

          docker compose \
            -f docker-compose.yml \
            up -d db

      # Step 4: Wait for services to be ready
      - name: Wait for services
        run: |
          echo "Waiting for database..."
          i=0
          while ! docker compose exec -T webapp sh -c 'nc -z db 3306' >/dev/null 2>&1; do
            i=$((i+1))
            if [ $i -ge 12 ]; then
              echo "Database did not become available in time."
              docker compose logs db
              exit 1
            fi
            echo -n "."
            sleep 5
          done
          echo "Database is ready!"

      # Step 5: Run the REAL scan and save the output to a log file
      - name: Run REAL scan against GPT-3.5-Turbo
        run: |
          bash -c '
            docker compose exec -T \
              -e CI=true \
              -e DATABASE_URL="sqlite:///ci_scan_results.db" \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              webapp python run_cli.py \
                --model-name "Staging Test: GPT-3.5-Turbo" \
                --api-endpoint "https://api.openai.com/v1/chat/completions" \
                --api-key "${{ secrets.OPENAI_API_KEY }}" \
                --openai-model "gpt-3.5-turbo" \
            | tee staging_scan_output.log
          '
          
      # Step 6: Publish the Job Summary from the log file
      - name: Publish Test Summary
        if: success()
        run: |
          score_line=$(grep 'Score:' staging_scan_output.log | tail -n 1)
          if [ -z "$score_line" ]; then
              score_line="Score: Not found"
          fi
          echo "### 🛡️ LLM Safety Toolkit: Manual Staging Test" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Result:** ✅ Real Scan Completed" >> $GITHUB_STEP_SUMMARY
          echo "**Final Score:** \`${score_line}\`" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to view full scan log</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat staging_scan_output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      # Step 7: Display logs only if a step failed
      - name: Display container logs on failure
        if: failure()
        run: docker compose logs